{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://ngx-chess-board/lib/models/pieces/color.ts","ng://ngx-chess-board/lib/models/pieces/piece.ts","ng://ngx-chess-board/lib/models/pieces/point.ts","ng://ngx-chess-board/lib/models/pieces/rook.ts","ng://ngx-chess-board/lib/models/pieces/king.ts","ng://ngx-chess-board/lib/models/pieces/bishop.ts","ng://ngx-chess-board/lib/models/pieces/knight.ts","ng://ngx-chess-board/lib/models/pieces/pawn.ts","ng://ngx-chess-board/lib/models/pieces/queen.ts","ng://ngx-chess-board/lib/utils/unicode-constants.ts","ng://ngx-chess-board/lib/board-state-provider/board-loader.ts","ng://ngx-chess-board/lib/board-state-provider/board-state.ts","ng://ngx-chess-board/lib/board-state-provider/board-state-provider.ts","ng://ngx-chess-board/lib/coords/coords-provider.ts","ng://ngx-chess-board/lib/drawing-tools/arrow.ts","ng://ngx-chess-board/lib/drawing-tools/circle.ts","ng://ngx-chess-board/lib/drawing-tools/draw-point.ts","ng://ngx-chess-board/lib/drawing-tools/draw-provider.ts","ng://ngx-chess-board/lib/history-move-provider/history-move.ts","ng://ngx-chess-board/lib/history-move-provider/history-move-provider.ts","ng://ngx-chess-board/lib/models/board.ts","ng://ngx-chess-board/lib/models/move-translation.ts","ng://ngx-chess-board/lib/utils/move-utils.ts","ng://ngx-chess-board/lib/piece-decorator/piece-abstract-decorator.ts","ng://ngx-chess-board/lib/piece-decorator/available-move-decorator.ts","ng://ngx-chess-board/lib/piece-promotion-modal/piece-promotion-modal.component.ts","ng://ngx-chess-board/lib/service/ngx-chess-board.service.ts","ng://ngx-chess-board/lib/utils/constants.ts","ng://ngx-chess-board/lib/utils/inputs/piece-icon-input-manager.ts","ng://ngx-chess-board/lib/ngx-chess-board.component.ts","ng://ngx-chess-board/lib/ngx-chess-board.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","Color","WHITE","BLACK","point","color","constant","relValue","board","checkPoints","Point","row","col","isEqual","that","hasCoordsEqual","Rook","_super","_this","isMovedAlready","tslib_1.__extends","getPossibleMoves","possiblePoints","isFieldEmpty","j","getPossibleCaptures","isFieldTakenByEnemy","getCoveredFields","getPieceByField","King","Piece","castledAlready","shortCastled","longCastled","isCastling","isFieldUnderAttack","longCastlePossible","leftRook","shortCastlePossible","rightRook","Bishop","Knight","Pawn","reverted","enPassantPoint","enPassantPiece","Math","abs","Queen","UnicodeConstants","WHITE_KING","name","icon","WHITE_QUEEN","WHITE_KNIGHT","WHITE_ROOK","WHITE_PAWN","WHITE_BISHOP","BLACK_KING","BLACK_QUEEN","BLACK_KNIGHT","BLACK_ROOK","BLACK_PAWN","BLACK_BISHOP","BoardLoader","addPieces","pieces","calculateFEN","loadFEN","fen","Error","split","pointer","chunk","charAt","match","Number","pawn","setCurrentPlayer","setCastles","setEnPassant","setFullMoveCount","setBoard","currentWhitePlayer","castleChunk","includes","setRookAlreadyMoved","find","piece","BoardState","BoardStateProvider","statesSubject$","BehaviorSubject","defineProperty","states","addMove","state","getStates","pop","lastState","getLastState","filter","isEmpty","clear","getLastStateIndex","CoordsProvider","defaultXCoords","reversedXCoords","defaultYCoords","reversedYCoords","currentXCoords","currentYCoords","reverse","reset","init","Arrow","arrow","start","end","Circle","circle","drawPoint","DrawPoint","x","y","DrawProvider","arrowsSubject$","circlesSubject$","arrows$","asObservable","circles$","circles","arrows","addCircle","reomveCircle","removeCircle","addArrow","removeArrow","containsCircle","checkCircle","some","containsArrow","checkArrow","HistoryMove","move","captured","HistoryMoveProvider","historyMovesSubject$","historyMove","historyMoves","lastHistoryMove","getLastMove","getAll","getLastMoveIndex","Board","lastMoveSrc","lastMoveDest","possibleCaptures","possibleMoves","fullMoveCount","isXYInPossibleMoves","isXYInPossibleCaptures","capture","isXYInSourceMove","isXYInDestMove","isXYInActiveMove","activePiece","isPointInPossibleMoves","isPointInPossibleCaptures","whiteKingChecked","blackKingChecked","forEach","reversePoint","clone","cloneDeep","enemyColor","field","isKingInCheck","king","getKingByColor","getCastleFENString","sort","join","toUpperCase","getEnPassantFENString","String","fromCharCode","emptyFields","foundPiece","this_1","substr","concatedEnPassant","isXYInPointSelection","MoveTranslation","xAxis","yAxis","_xAxis","_yAxis","_reverted","MoveUtils","willMoveCauseCheck","currentColor","destRow","destCol","srcPiece","destPiece","isBound","format","sourcePoint","destPoint","sourceX","destX","translateCoordsToIndex","coords","charCodeAt","AvailableMoveDecorator","pointClicked","PieceAbstractDecorator","PiecePromotionModalComponent","selectedIndex","opened","open","closeCallback","onCloseCallback","modal","nativeElement","style","display","changeSelection","index","Component","args","selector","template","ViewChild","static","NgxChessBoardService","componentMethodCallSource","Subject","componentMethodCalled$","Injectable","providedIn","Constants","DEFAULT_DARK_TILE_COLOR","DEFAULT_LIGHT_TILE_COLOR","DEFAULT_SIZE","MIN_BOARD_SIZE","MAX_BOARD_SIZE","PieceIconInputManager","_defaultIcons","_pieceIconInput","isDefaultIcons","undefined","pieceIconInput","getPieceIcon","isWhite","whiteKingUrl","blackKingUrl","whiteQueenUrl","blackQueenUrl","whiteRookUrl","blackRookUrl","whiteBishopUrl","blackBishopUrl","whiteKnightUrl","blackKnightUrl","whitePawnUrl","blackPawnUrl","loadDefaultData","NgxChessBoardComponent","ngxChessBoardService","darkTileColor","lightTileColor","showCoords","dragDisabled","drawDisabled","lightDisabled","darkDisabled","moveChange","EventEmitter","checkmate","stalemate","selected","disabling","heightAndWidth","boardLoader","boardStateProvider","moveHistoryProvider","drawProvider","pieceIconManager","size","calculatePieceSize","pieceIcons","onRightClick","event","preventDefault","ngOnChanges","changes","ngOnInit","subscribe","onMouseUp","button","getClickPoint","disableSelection","pieceClicked","getPieceByPoint","isPieceDisabled","handleClickEvent","prepareActivePiece","addDrawPoint","ctrlKey","altKey","shiftKey","afterMoveActions","promotionIndex","checkIfPawnFirstMove","checkIfRookMoved","checkIfKingMoved","check","checkForPossibleMoves","checkForPat","lastMove","emit","floor","isKingChecked","boardRef","getBoundingClientRect","top","height","left","width","movePiece","toMovePiece","newPoint","checkIfPawnTakesEnPassant","checkIfPawnEnpassanted","increaseFullMoveCount","checkForPawnPromote","toPromotePiece","resolvePromotionChoice","openPromoteDialog","updateBoard","undo","lastBoard","getMoveHistory","setFEN","exception","getFEN","dragEnded","source","element","zIndex","pointerEvents","touchAction","dragStart","position","onMouseDown","getDrawingPoint","crtl","alt","shift","squareSize","xx","yy","saveClone","saveMoveClone","moveStateProvider","pieceSize","upPoint","sourceIndexes","substring","destIndexes","getCustomPieceIcons","JSON","parse","Input","Output","HostListener","NgxChessBoardModule","forRoot","ngModule","providers","NgModule","declarations","imports","CommonModule","DragDropModule","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export enum Color {\r\n    WHITE,\r\n    BLACK,\r\n}\r\n","import { AbstractPiece } from '../../piece-decorator/abstract-piece';\r\nimport { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { Point } from './point';\r\n\r\nexport abstract class Piece implements AbstractPiece {\r\n    point: Point;\r\n    color: Color;\r\n    constant: PieceConstant;\r\n    checkPoints: Point[] = [];\r\n    relValue: number;\r\n    board: Board;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        relValue: number,\r\n        board: Board\r\n    ) {\r\n        this.color = color;\r\n        this.constant = constant;\r\n        this.point = point;\r\n        this.relValue = relValue;\r\n        this.board = board;\r\n    }\r\n\r\n    abstract getPossibleMoves(): Point[];\r\n\r\n    abstract getPossibleCaptures(): Point[];\r\n\r\n    abstract getCoveredFields(): Point[]; // zwraca liste punktow ktore sa puste lub istnieje na nich pionek tego samego koloru\r\n}\r\n","export class Point {\r\n    row: number;\r\n    col: number;\r\n\r\n    constructor(row: number, col: number) {\r\n        this.row = row;\r\n        this.col = col;\r\n    }\r\n\r\n    isEqual(that: Point) {\r\n        return that && this.row === that.row && this.col === that.col;\r\n    }\r\n\r\n    hasCoordsEqual(row: number, col: number) {\r\n        return row && col && this.row === row && this.col === col;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { King } from './king';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Rook extends Piece {\r\n    isMovedAlready = false;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 5, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    col,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    col,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\nimport { Rook } from './rook';\r\n\r\nexport class King extends Piece {\r\n    castledAlready = false;\r\n    shortCastled = false;\r\n    longCastled = false;\r\n    isMovedAlready;\r\n    isCastling = false;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 0, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        // lewo\r\n        if (\r\n            this.board.isFieldEmpty(row, col - 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row, col - 1));\r\n        }\r\n\r\n        // prawo\r\n        if (\r\n            this.board.isFieldEmpty(row, col + 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row, col + 1));\r\n        }\r\n\r\n        // dol\r\n        if (\r\n            this.board.isFieldEmpty(row + 1, col) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col));\r\n        }\r\n\r\n        // gora\r\n        if (\r\n            this.board.isFieldEmpty(row - 1, col) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col));\r\n        }\r\n\r\n        // lewo gora\r\n        if (\r\n            this.board.isFieldEmpty(row - 1, col - 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col - 1));\r\n        }\r\n        // prawo gora\r\n        if (\r\n            this.board.isFieldEmpty(row - 1, col + 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col + 1));\r\n        }\r\n\r\n        // lewo dol\r\n        if (\r\n            this.board.isFieldEmpty(row + 1, col - 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col - 1));\r\n        }\r\n        // prawo dol\r\n        if (\r\n            this.board.isFieldEmpty(row + 1, col + 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col + 1));\r\n        }\r\n\r\n        if (!this.isMovedAlready) {\r\n            let longCastlePossible = true;\r\n            for (let i = col - 1; i > 0; --i) {\r\n                if (\r\n                    !this.board.isFieldEmpty(row, i) ||\r\n                    this.board.isFieldUnderAttack(\r\n                        row,\r\n                        i,\r\n                        this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                    )\r\n                ) {\r\n                    longCastlePossible = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (longCastlePossible && this.board.getPieceByField(row, 0)) {\r\n                const leftRook = this.board.getPieceByField(row, 0);\r\n                if (leftRook instanceof Rook) {\r\n                    if (!leftRook.isMovedAlready) {\r\n                        possiblePoints.push(new Point(row, col - 2));\r\n                    }\r\n                }\r\n            }\r\n\r\n            let shortCastlePossible = true;\r\n            for (let i = col + 1; i < 7; ++i) {\r\n                if (\r\n                    !this.board.isFieldEmpty(row, i) ||\r\n                    this.board.isFieldUnderAttack(\r\n                        row,\r\n                        i,\r\n                        this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                    )\r\n                ) {\r\n                    shortCastlePossible = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (shortCastlePossible && this.board.getPieceByField(row, 7)) {\r\n                const rightRook = this.board.getPieceByField(row, 7);\r\n                if (rightRook instanceof Rook) {\r\n                    if (!rightRook.isMovedAlready) {\r\n                        possiblePoints.push(new Point(row, col + 2));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // lewo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row, col - 1));\r\n        }\r\n\r\n        // prawo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row, col + 1));\r\n        }\r\n\r\n        // dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col));\r\n        }\r\n\r\n        // gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col));\r\n        }\r\n\r\n        // lewo gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col - 1));\r\n        }\r\n        // prawo gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col + 1));\r\n        }\r\n\r\n        // lewo dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col - 1));\r\n        }\r\n        // prawo dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col + 1));\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // lewo\r\n        if (this.board.isFieldTakenByEnemy(row, col - 1, this.color)) {\r\n            possiblePoints.push(new Point(row, col - 1));\r\n        }\r\n\r\n        // prawo\r\n        if (this.board.isFieldTakenByEnemy(row, col + 1, this.color)) {\r\n            possiblePoints.push(new Point(row, col + 1));\r\n        }\r\n\r\n        // dol\r\n        if (this.board.isFieldTakenByEnemy(row + 1, col, this.color)) {\r\n            possiblePoints.push(new Point(row + 1, col));\r\n        }\r\n\r\n        // gora\r\n        if (this.board.isFieldTakenByEnemy(row - 1, col, this.color)) {\r\n            possiblePoints.push(new Point(row - 1, col));\r\n        }\r\n\r\n        // lewo gora\r\n        if (this.board.isFieldTakenByEnemy(row - 1, col - 1, this.color)) {\r\n            possiblePoints.push(new Point(row - 1, col - 1));\r\n        }\r\n        // prawo gora\r\n        if (this.board.isFieldTakenByEnemy(row - 1, col + 1, this.color)) {\r\n            possiblePoints.push(new Point(row - 1, col + 1));\r\n        }\r\n\r\n        // lewo dol\r\n        if (this.board.isFieldTakenByEnemy(row + 1, col - 1, this.color)) {\r\n            possiblePoints.push(new Point(row + 1, col - 1));\r\n        }\r\n        // prawo dol\r\n        if (this.board.isFieldTakenByEnemy(row + 1, col + 1, this.color)) {\r\n            possiblePoints.push(new Point(row + 1, col + 1));\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { King } from './king';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Bishop extends Piece {\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 3, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures() {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Knight extends Piece {\r\n    isMovedAlready = false;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 3, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // gora -> lewo\r\n        if (this.board.isFieldEmpty(row - 2, col - 1)) {\r\n            possiblePoints.push(new Point(row - 2, col - 1));\r\n        }\r\n\r\n        // gora -> prawo\r\n        if (this.board.isFieldEmpty(row - 2, col + 1)) {\r\n            possiblePoints.push(new Point(row - 2, col + 1));\r\n        }\r\n\r\n        // lewo -> gora\r\n        if (this.board.isFieldEmpty(row - 1, col - 2)) {\r\n            possiblePoints.push(new Point(row - 1, col - 2));\r\n        }\r\n\r\n        // prawo -> gora\r\n        if (this.board.isFieldEmpty(row - 1, col + 2)) {\r\n            possiblePoints.push(new Point(row - 1, col + 2));\r\n        }\r\n\r\n        // lewo -> dol\r\n        if (this.board.isFieldEmpty(row + 1, col - 2)) {\r\n            possiblePoints.push(new Point(row + 1, col - 2));\r\n        }\r\n\r\n        // prawo -> dol\r\n        if (this.board.isFieldEmpty(row + 1, col + 2)) {\r\n            possiblePoints.push(new Point(row + 1, col + 2));\r\n        }\r\n\r\n        // dol -> lewo\r\n        if (this.board.isFieldEmpty(row + 2, col - 1)) {\r\n            possiblePoints.push(new Point(row + 2, col - 1));\r\n        }\r\n\r\n        // dol -> prawo\r\n        if (this.board.isFieldEmpty(row + 2, col + 1)) {\r\n            possiblePoints.push(new Point(row + 2, col + 1));\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // gora -> lewo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 2,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 2, col - 1));\r\n        }\r\n\r\n        // gora -> prawo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 2,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 2, col + 1));\r\n        }\r\n\r\n        // lewo -> gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col - 2,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col - 2));\r\n        }\r\n\r\n        // prawo -> gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col + 2,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col + 2));\r\n        }\r\n\r\n        // lewo -> dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col - 2,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col - 2));\r\n        }\r\n\r\n        // prawo -> dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col + 2,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col + 2));\r\n        }\r\n\r\n        // dol -> lewo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 2,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 2, col - 1));\r\n        }\r\n\r\n        // dol -> prawo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 2,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 2, col + 1));\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // gora -> lewo\r\n        possiblePoints.push(new Point(row - 2, col - 1));\r\n\r\n        // gora -> prawo\r\n        possiblePoints.push(new Point(row - 2, col + 1));\r\n\r\n        // lewo -> gora\r\n        possiblePoints.push(new Point(row - 1, col - 2));\r\n\r\n        // prawo -> gora\r\n        possiblePoints.push(new Point(row - 1, col + 2));\r\n\r\n        // lewo -> dol\r\n        possiblePoints.push(new Point(row + 1, col - 2));\r\n\r\n        // prawo -> dol\r\n        possiblePoints.push(new Point(row + 1, col + 2));\r\n\r\n        // dol -> lewo\r\n        possiblePoints.push(new Point(row + 2, col - 1));\r\n\r\n        // dol -> prawo\r\n        possiblePoints.push(new Point(row + 2, col + 1));\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Pawn extends Piece {\r\n    isMovedAlready = false;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 1, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        if (\r\n            (!this.board.reverted && this.color === Color.WHITE) ||\r\n            (this.board.reverted && this.color === Color.BLACK)\r\n        ) {\r\n            if (this.board.isFieldEmpty(row - 1, col)) {\r\n                possiblePoints.push(new Point(row - 1, col));\r\n\r\n                if (\r\n                    !this.isMovedAlready &&\r\n                    this.board.isFieldEmpty(row - 2, col)\r\n                ) {\r\n                    possiblePoints.push(new Point(row - 2, col));\r\n                }\r\n            }\r\n        } else {\r\n            if (\r\n                /*!board.isFieldTakenByEnemy(row + 1, col, Color.WHITE) &&*/ this.board.isFieldEmpty(\r\n                    row + 1,\r\n                    col\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row + 1, col));\r\n\r\n                if (\r\n                    !this.isMovedAlready &&\r\n                    this.board.isFieldEmpty(row + 2, col)\r\n                ) {\r\n                    possiblePoints.push(new Point(row + 2, col));\r\n                }\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        if (\r\n            (!this.board.reverted && this.color === Color.WHITE) ||\r\n            (this.board.reverted && this.color === Color.BLACK)\r\n        ) {\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row - 1,\r\n                    col - 1,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row - 1, col - 1));\r\n            }\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row - 1,\r\n                    col + 1,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row - 1, col + 1));\r\n            }\r\n        } else {\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row + 1,\r\n                    col - 1,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row + 1, col - 1));\r\n            }\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row + 1,\r\n                    col + 1,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row + 1, col + 1));\r\n            }\r\n        }\r\n\r\n        if (\r\n            this.board.enPassantPoint &&\r\n            this.board.enPassantPiece.color ===\r\n                (this.color === Color.WHITE ? Color.BLACK : Color.WHITE)\r\n        ) {\r\n            if (\r\n                row === this.board.enPassantPiece.point.row &&\r\n                Math.abs(this.board.enPassantPiece.point.col - col) === 1\r\n            ) {\r\n                possiblePoints.push(this.board.enPassantPoint);\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        if (\r\n            (!this.board.reverted && this.color === Color.WHITE) ||\r\n            (this.board.reverted && this.color === Color.BLACK)\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col - 1));\r\n\r\n            possiblePoints.push(new Point(row - 1, col + 1));\r\n        } else {\r\n            possiblePoints.push(new Point(row + 1, col - 1));\r\n\r\n            possiblePoints.push(new Point(row + 1, col + 1));\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { King } from './king';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Queen extends Piece {\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 9, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    col,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    col,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, col) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, col) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(row, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(row, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","export interface PieceConstant {\r\n    name: string;\r\n    icon: string;\r\n}\r\n\r\nexport const UnicodeConstants = {\r\n    WHITE_KING: { name: 'King', icon: '&#x2654;' },\r\n    WHITE_QUEEN: { name: 'Queen', icon: '&#x2655;' },\r\n    WHITE_KNIGHT: { name: 'Knight', icon: '&#x2658' },\r\n    WHITE_ROOK: { name: 'Rook', icon: '&#x2656' },\r\n    WHITE_PAWN: { name: 'Pawn', icon: '&#x2659' },\r\n    WHITE_BISHOP: { name: 'Bishop', icon: '&#x2657' },\r\n\r\n    BLACK_KING: { name: 'King', icon: '&#x265A' },\r\n    BLACK_QUEEN: { name: 'Queen', icon: '&#x265B' },\r\n    BLACK_KNIGHT: { name: 'Knight', icon: '&#x265E' },\r\n    BLACK_ROOK: { name: 'Rook', icon: '&#x265C' },\r\n    BLACK_PAWN: { name: 'Pawn', icon: '&#x265F' },\r\n    BLACK_BISHOP: { name: 'Bishop', icon: '&#x265D' },\r\n};\r\n","import { Board } from '../models/board';\r\nimport { Bishop } from '../models/pieces/bishop';\r\nimport { Color } from '../models/pieces/color';\r\nimport { King } from '../models/pieces/king';\r\nimport { Knight } from '../models/pieces/knight';\r\nimport { Pawn } from '../models/pieces/pawn';\r\nimport { Point } from '../models/pieces/point';\r\nimport { Queen } from '../models/pieces/queen';\r\nimport { Rook } from '../models/pieces/rook';\r\nimport { UnicodeConstants } from '../utils/unicode-constants';\r\n\r\nexport class BoardLoader {\r\n    private board: Board;\r\n\r\n    constructor(board: Board) {\r\n        this.board = board;\r\n    }\r\n\r\n    addPieces() {\r\n        this.board.pieces = [];\r\n        // piony czarne\r\n        for (let i = 0; i < 8; ++i) {\r\n            this.board.pieces.push(new Pawn(new Point(1, i), Color.BLACK, UnicodeConstants.BLACK_PAWN, this.board));\r\n        }\r\n        this.board.pieces.push(new Rook(new Point(0, 0), Color.BLACK, UnicodeConstants.BLACK_ROOK, this.board));\r\n        this.board.pieces.push(new Knight(new Point(0, 1), Color.BLACK, UnicodeConstants.BLACK_KNIGHT, this.board));\r\n        this.board.pieces.push(new Bishop(new Point(0, 2), Color.BLACK, UnicodeConstants.BLACK_BISHOP, this.board));\r\n        this.board.pieces.push(new Queen(new Point(0, 3), Color.BLACK, UnicodeConstants.BLACK_QUEEN, this.board));\r\n        this.board.pieces.push(new King(new Point(0, 4), Color.BLACK, UnicodeConstants.BLACK_KING, this.board));\r\n        this.board.pieces.push(new Bishop(new Point(0, 5), Color.BLACK, UnicodeConstants.BLACK_BISHOP, this.board));\r\n        this.board.pieces.push(new Knight(new Point(0, 6), Color.BLACK, UnicodeConstants.BLACK_KNIGHT, this.board));\r\n        this.board.pieces.push(new Rook(new Point(0, 7), Color.BLACK, UnicodeConstants.BLACK_ROOK, this.board));\r\n\r\n        // piony biale\r\n        for (let i = 0; i < 8; ++i) {\r\n            this.board.pieces.push(new Pawn(new Point(6, i), Color.WHITE, UnicodeConstants.WHITE_PAWN, this.board));\r\n        }\r\n        this.board.pieces.push(new Rook(new Point(7, 0), Color.WHITE, UnicodeConstants.WHITE_ROOK, this.board));\r\n        this.board.pieces.push(new Knight(new Point(7, 1), Color.WHITE, UnicodeConstants.WHITE_KNIGHT, this.board));\r\n        this.board.pieces.push(new Bishop(new Point(7, 2), Color.WHITE, UnicodeConstants.WHITE_BISHOP, this.board));\r\n        this.board.pieces.push(new Queen(new Point(7, 3), Color.WHITE, UnicodeConstants.WHITE_QUEEN, this.board));\r\n        this.board.pieces.push(new King(new Point(7, 4), Color.WHITE, UnicodeConstants.WHITE_KING, this.board));\r\n        this.board.pieces.push(new Bishop(new Point(7, 5), Color.WHITE, UnicodeConstants.WHITE_BISHOP, this.board));\r\n        this.board.pieces.push(new Knight(new Point(7, 6), Color.WHITE, UnicodeConstants.WHITE_KNIGHT, this.board));\r\n        this.board.pieces.push(new Rook(new Point(7, 7), Color.WHITE, UnicodeConstants.WHITE_ROOK, this.board));\r\n\r\n        this.board.calculateFEN();\r\n    }\r\n\r\n    loadFEN(fen: string) {\r\n        if (fen) {\r\n            this.board.reverted = false;\r\n            this.board.pieces = [];\r\n            const split = fen.split('/');\r\n            for (let i = 0; i < 8; ++i) {\r\n                let pointer = 0;\r\n                for (let j = 0; j < 8; ++j) {\r\n                    const chunk = split[i].charAt(j);\r\n                    if (chunk.match(/[0-9]/)) {\r\n                        pointer += Number(chunk);\r\n                    } else {\r\n                        switch (chunk) {\r\n                            case 'r':\r\n                                this.board.pieces.push(\r\n                                    new Rook(\r\n                                        new Point(i, pointer),\r\n                                        Color.BLACK,\r\n                                        UnicodeConstants.BLACK_ROOK,\r\n                                        this.board\r\n                                    )\r\n                                );\r\n                                break;\r\n                            case 'n':\r\n                                this.board.pieces.push(\r\n                                    new Knight(\r\n                                        new Point(i, pointer),\r\n                                        Color.BLACK,\r\n                                        UnicodeConstants.BLACK_KNIGHT,\r\n                                        this.board\r\n                                    )\r\n                                );\r\n\r\n                                break;\r\n                            case 'b':\r\n                                this.board.pieces.push(\r\n                                    new Bishop(\r\n                                        new Point(i, pointer),\r\n                                        Color.BLACK,\r\n                                        UnicodeConstants.BLACK_BISHOP,\r\n                                        this.board\r\n                                    )\r\n                                );\r\n                                break;\r\n                            case 'q':\r\n                                this.board.pieces.push(\r\n                                    new Queen(\r\n                                        new Point(i, pointer),\r\n                                        Color.BLACK,\r\n                                        UnicodeConstants.BLACK_QUEEN,\r\n                                        this.board\r\n                                    )\r\n                                );\r\n                                break;\r\n                            case 'k':\r\n                                this.board.pieces.push(\r\n                                    new King(\r\n                                        new Point(i, pointer),\r\n                                        Color.BLACK,\r\n                                        UnicodeConstants.BLACK_KING,\r\n                                        this.board\r\n                                    )\r\n                                );\r\n                                break;\r\n                            case 'p': {\r\n                                const pawn = new Pawn(\r\n                                    new Point(i, pointer),\r\n                                    Color.BLACK,\r\n                                    UnicodeConstants.BLACK_PAWN,\r\n                                    this.board\r\n                                );\r\n                                if (\r\n                                    (pawn.color === Color.BLACK && pawn.point.row !== 1) ||\r\n                                    (pawn.color === Color.WHITE && pawn.point.row !== 6)\r\n                                ) {\r\n                                    pawn.isMovedAlready = true;\r\n                                }\r\n                                this.board.pieces.push(pawn);\r\n                                break;\r\n                            }\r\n                            case 'R':\r\n                                this.board.pieces.push(\r\n                                    new Rook(\r\n                                        new Point(i, pointer),\r\n                                        Color.WHITE,\r\n                                        UnicodeConstants.WHITE_ROOK,\r\n                                        this.board\r\n                                    )\r\n                                );\r\n\r\n                                break;\r\n                            case 'N':\r\n                                this.board.pieces.push(\r\n                                    new Knight(\r\n                                        new Point(i, pointer),\r\n                                        Color.WHITE,\r\n                                        UnicodeConstants.WHITE_KNIGHT,\r\n                                        this.board\r\n                                    )\r\n                                );\r\n                                break;\r\n\r\n                            case 'B':\r\n                                this.board.pieces.push(\r\n                                    new Bishop(\r\n                                        new Point(i, pointer),\r\n                                        Color.WHITE,\r\n                                        UnicodeConstants.WHITE_BISHOP,\r\n                                        this.board\r\n                                    )\r\n                                );\r\n                                break;\r\n\r\n                            case 'Q':\r\n                                this.board.pieces.push(\r\n                                    new Queen(\r\n                                        new Point(i, pointer),\r\n                                        Color.WHITE,\r\n                                        UnicodeConstants.WHITE_QUEEN,\r\n                                        this.board\r\n                                    )\r\n                                );\r\n                                break;\r\n\r\n                            case 'K':\r\n                                this.board.pieces.push(\r\n                                    new King(\r\n                                        new Point(i, pointer),\r\n                                        Color.WHITE,\r\n                                        UnicodeConstants.WHITE_KING,\r\n                                        this.board\r\n                                    )\r\n                                );\r\n                                break;\r\n\r\n                            case 'P': {\r\n                                const pawn = new Pawn(\r\n                                    new Point(i, pointer),\r\n                                    Color.WHITE,\r\n                                    UnicodeConstants.WHITE_PAWN,\r\n                                    this.board\r\n                                );\r\n                                if (\r\n                                    (pawn.color === Color.BLACK && pawn.point.row !== 1) ||\r\n                                    (pawn.color === Color.WHITE && pawn.point.row !== 6)\r\n                                ) {\r\n                                    pawn.isMovedAlready = true;\r\n                                }\r\n                                this.board.pieces.push(pawn);\r\n                                break;\r\n                            }\r\n                        }\r\n                        ++pointer;\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.setCurrentPlayer(fen);\r\n            this.setCastles(fen);\r\n            this.setEnPassant(fen);\r\n            this.setFullMoveCount(fen);\r\n        } else {\r\n            throw Error('Incorrect FEN provided');\r\n        }\r\n    }\r\n\r\n    setBoard(board: Board) {\r\n        this.board = board;\r\n    }\r\n\r\n    private setCurrentPlayer(fen: string) {\r\n        if (fen) {\r\n            const split = fen.split(' ');\r\n            this.board.currentWhitePlayer = split[1] === 'w';\r\n        }\r\n    }\r\n\r\n    private setCastles(fen: string) {\r\n        if (fen) {\r\n            const split = fen.split(' ');\r\n            const castleChunk = split[2];\r\n\r\n            if (!castleChunk.includes('K')) {\r\n                this.setRookAlreadyMoved(Color.WHITE, 7);\r\n            }\r\n\r\n            if (!castleChunk.includes('Q')) {\r\n                this.setRookAlreadyMoved(Color.WHITE, 0);\r\n            }\r\n\r\n            if (!castleChunk.includes('k')) {\r\n                this.setRookAlreadyMoved(Color.BLACK, 7);\r\n            }\r\n\r\n            if (!castleChunk.includes('q')) {\r\n                this.setRookAlreadyMoved(Color.BLACK, 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setFullMoveCount(fen: string) {}\r\n\r\n    private setEnPassant(fen: string) {\r\n        if (fen) {\r\n            const split = fen.split(' ');\r\n            const enPassantPoint = split[3];\r\n\r\n            if (enPassantPoint === '-') {\r\n                return;\r\n            }\r\n\r\n            // if()\r\n        }\r\n    }\r\n\r\n    private setRookAlreadyMoved(color: Color, col: number) {\r\n        const rook = this.board.pieces.find(\r\n            (piece) => piece.color === color && piece instanceof Rook && piece.point.col === col\r\n        ) as Rook;\r\n        rook.isMovedAlready = true;\r\n    }\r\n}\r\n","import { Board } from '../models/board';\r\n\r\nexport class BoardState {\r\n\r\n    board: Board;\r\n\r\n    constructor(board: Board) {\r\n        this.board = board;\r\n    }\r\n\r\n}\r\n","import { BehaviorSubject } from 'rxjs';\r\nimport { BoardState } from './board-state';\r\n\r\nexport class BoardStateProvider {\r\n    statesSubject$ = new BehaviorSubject<BoardState[]>([]);\r\n\r\n    get states(): BoardState[] {\r\n        return this.statesSubject$.value;\r\n    }\r\n\r\n    set states(states: BoardState[]) {\r\n        this.statesSubject$.next(states);\r\n    }\r\n\r\n    addMove(state: BoardState) {\r\n        this.states = [...this.states, state];\r\n    }\r\n\r\n    getStates(): BoardState[] {\r\n        return this.states;\r\n    }\r\n\r\n    pop(): BoardState {\r\n        const lastState = this.getLastState();\r\n        this.states = this.states.filter((state) => state !== lastState);\r\n        return lastState;\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.states.length === 0;\r\n    }\r\n\r\n    clear() {\r\n        this.states = [];\r\n    }\r\n\r\n    getLastState() {\r\n        return this.states[this.getLastStateIndex()];\r\n    }\r\n\r\n    getLastStateIndex(): number {\r\n        return this.states.length - 1;\r\n    }\r\n}\r\n","export class CoordsProvider {\r\n    private defaultXCoords: string[] = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\r\n    private reversedXCoords: string[] = ['h', 'g', 'f', 'e', 'd', 'c', 'b', 'a'];\r\n\r\n    private defaultYCoords: number[] = [8, 7, 6, 5, 4, 3, 2, 1];\r\n    private reversedYCoords: number[] = [1, 2, 3, 4, 5, 6, 7, 8];\r\n\r\n    private currentXCoords: string[] = this.defaultXCoords;\r\n    private currentYCoords: number[] = this.defaultYCoords;\r\n\r\n    get xCoords(): string[] {\r\n        return this.currentXCoords;\r\n    }\r\n\r\n    get yCoords(): number[] {\r\n        return this.currentYCoords;\r\n    }\r\n\r\n    reverse() {\r\n        this.currentXCoords = this.reversedXCoords;\r\n        this.currentYCoords = this.reversedYCoords;\r\n    }\r\n\r\n    reset() {\r\n        this.init();\r\n    }\r\n\r\n    private init() {\r\n        this.currentXCoords = this.defaultXCoords;\r\n        this.currentYCoords = this.defaultYCoords;\r\n    }\r\n}\r\n","import { DrawPoint } from './draw-point';\r\n\r\nexport class Arrow {\r\n    start: DrawPoint;\r\n    end: DrawPoint;\r\n\r\n    isEqual(arrow: Arrow) {\r\n        return arrow && this.start.isEqual(arrow.start) && this.end.isEqual(arrow.end);\r\n    }\r\n}\r\n","import { DrawPoint } from './draw-point';\r\n\r\nexport class Circle {\r\n    drawPoint: DrawPoint;\r\n\r\n    isEqual(circle: Circle) {\r\n        return circle && this.drawPoint.isEqual(circle.drawPoint);\r\n    }\r\n}\r\n","export class DrawPoint {\r\n    x: number;\r\n    y: number;\r\n    color: string;\r\n\r\n    constructor(x: number, y: number, color: string) {\r\n        this.x = x + 0.5;\r\n        this.y = y + 0.5;\r\n        this.color = color;\r\n    }\r\n\r\n    isEqual(that: DrawPoint) {\r\n        return that && that.x === this.x && this.y === that.y;\r\n    }\r\n}\r\n","import { BehaviorSubject } from 'rxjs';\r\nimport { Arrow } from './arrow';\r\nimport { Circle } from './circle';\r\n\r\nexport class DrawProvider {\r\n    private arrowsSubject$ = new BehaviorSubject<Arrow[]>([]);\r\n    private circlesSubject$ = new BehaviorSubject<Circle[]>([]);\r\n\r\n    public arrows$ = this.arrowsSubject$.asObservable();\r\n    public circles$ = this.circlesSubject$.asObservable();\r\n\r\n    private get circles(): Circle[] {\r\n        return this.circlesSubject$.value;\r\n    }\r\n\r\n    private set circles(circles: Circle[]) {\r\n        this.circlesSubject$.next(circles);\r\n    }\r\n\r\n    private get arrows(): Arrow[] {\r\n        return this.arrowsSubject$.value;\r\n    }\r\n\r\n    private set arrows(arrows: Arrow[]) {\r\n        this.arrowsSubject$.next(arrows);\r\n    }\r\n\r\n    addCircle(circle: Circle) {\r\n        this.circles = [...this.circles, circle];\r\n    }\r\n\r\n    reomveCircle(removeCircle: Circle) {\r\n        this.circles = this.circles.filter((circle) => !circle.isEqual(removeCircle));\r\n    }\r\n\r\n    addArrow(arrow: Arrow) {\r\n        this.arrows = [...this.arrows, arrow];\r\n    }\r\n\r\n    removeArrow(removeArrow: Arrow) {\r\n        this.arrows = this.arrows.filter((arrow) => !arrow.isEqual(removeArrow));\r\n    }\r\n\r\n    containsCircle(checkCircle: Circle) {\r\n        return this.circles.some((circle) => circle.isEqual(checkCircle));\r\n    }\r\n\r\n    containsArrow(checkArrow: Arrow) {\r\n        return this.arrows.some((arrow: Arrow) => arrow.isEqual(checkArrow));\r\n    }\r\n\r\n    clear() {\r\n        this.arrows = [];\r\n        this.circles = [];\r\n    }\r\n}\r\n","import { Board } from '../models/board';\r\n\r\nexport class HistoryMove {\r\n    move: string;\r\n    piece: string;\r\n    color: string;\r\n    x: boolean;\r\n\r\n    constructor(move: string, piece: string, color: string, captured: boolean) {\r\n        this.move = move;\r\n        this.piece = piece;\r\n        this.color = color;\r\n        this.x = captured;\r\n    }\r\n}\r\n","import { BehaviorSubject } from 'rxjs';\r\nimport { HistoryMove } from './history-move';\r\n\r\nexport class HistoryMoveProvider {\r\n    historyMovesSubject$ = new BehaviorSubject<HistoryMove[]>([]);\r\n\r\n    get historyMoves(): HistoryMove[] {\r\n        return this.historyMovesSubject$.value;\r\n    }\r\n\r\n    set historyMoves(states: HistoryMove[]) {\r\n        this.historyMovesSubject$.next(states);\r\n    }\r\n\r\n    addMove(historyMove: HistoryMove) {\r\n        this.historyMoves = [...this.historyMoves, historyMove];\r\n    }\r\n\r\n    pop(): HistoryMove {\r\n        const lastHistoryMove = this.getLastMove();\r\n        this.historyMoves = this.historyMoves.filter(\r\n            (state) => state !== lastHistoryMove\r\n        );\r\n        return lastHistoryMove;\r\n    }\r\n\r\n    getAll() {\r\n        return this.historyMoves;\r\n    }\r\n\r\n    clear() {\r\n        this.historyMoves = [];\r\n    }\r\n\r\n    getLastMove() {\r\n        return this.historyMoves[this.getLastMoveIndex()];\r\n    }\r\n\r\n    getLastMoveIndex() {\r\n        return this.historyMoves.length - 1;\r\n    }\r\n}\r\n","import { cloneDeep } from 'lodash';\r\nimport { Bishop } from './pieces/bishop';\r\nimport { Color } from './pieces/color';\r\nimport { King } from './pieces/king';\r\nimport { Knight } from './pieces/knight';\r\nimport { Pawn } from './pieces/pawn';\r\nimport { Piece } from './pieces/piece';\r\nimport { Point } from './pieces/point';\r\nimport { Queen } from './pieces/queen';\r\nimport { Rook } from './pieces/rook';\r\n\r\nexport class Board {\r\n    board: number[][] = [];\r\n    pieces: Piece[] = [];\r\n\r\n    enPassantPoint: Point = null;\r\n    enPassantPiece: Piece = null;\r\n    lastMoveSrc: Point = null;\r\n    lastMoveDest: Point = null;\r\n    activePiece: Piece;\r\n\r\n    blackKingChecked: boolean;\r\n    possibleCaptures: any[] = [];\r\n    possibleMoves: Point[] = [];\r\n    whiteKingChecked: boolean;\r\n\r\n    currentWhitePlayer = true;\r\n    reverted = false;\r\n    fullMoveCount = 1;\r\n    fen: string;\r\n\r\n    constructor() {\r\n        for (let i = 0; i < 8; ++i) {\r\n            this.board[i] = [];\r\n            for (let j = 0; j < 8; ++j) {\r\n                this.board[i][j] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    isXYInPossibleMoves(row: number, col: number): boolean {\r\n        return this.possibleMoves.some((move) => move.row === row && move.col === col);\r\n    }\r\n\r\n    isXYInPossibleCaptures(row: number, col: number): boolean {\r\n        return this.possibleCaptures.some((capture) => capture.row === row && capture.col === col);\r\n    }\r\n\r\n    isXYInSourceMove(i: number, j: number) {\r\n        return this.lastMoveSrc && this.lastMoveSrc.row === i && this.lastMoveSrc.col === j;\r\n    }\r\n\r\n    isXYInDestMove(i: number, j: number) {\r\n        return this.lastMoveDest && this.lastMoveDest.row === i && this.lastMoveDest.col === j;\r\n    }\r\n\r\n    isXYInActiveMove(i: number, j: number) {\r\n        return this.activePiece && this.activePiece.point.row === i && this.activePiece.point.col === j;\r\n    }\r\n\r\n    isPointInPossibleMoves(point: Point): boolean {\r\n        return this.possibleMoves.some((move) => move.row === point.row && move.col === point.col);\r\n    }\r\n\r\n    isPointInPossibleCaptures(point: Point): boolean {\r\n        return this.possibleCaptures.some((capture) => capture.row === point.row && capture.col === point.col);\r\n    }\r\n\r\n    reset() {\r\n        this.lastMoveDest = null;\r\n        this.lastMoveSrc = null;\r\n        this.whiteKingChecked = false;\r\n        this.blackKingChecked = false;\r\n        this.possibleCaptures = [];\r\n        this.possibleMoves = [];\r\n        this.activePiece = null;\r\n        this.reverted = false;\r\n        this.currentWhitePlayer = true;\r\n        this.enPassantPoint = null;\r\n        this.enPassantPiece = null;\r\n        this.fullMoveCount = 1;\r\n        this.calculateFEN();\r\n    }\r\n\r\n    reverse() {\r\n        this.reverted = !this.reverted;\r\n        this.activePiece = null;\r\n        this.possibleMoves = [];\r\n        this.possibleCaptures = [];\r\n\r\n        this.pieces.forEach((piece: Piece) => this.reversePoint(piece.point));\r\n\r\n        this.reversePoint(this.lastMoveSrc);\r\n\r\n        if (this.enPassantPoint && this.enPassantPiece) {\r\n            this.reversePoint(this.enPassantPoint);\r\n        }\r\n    }\r\n\r\n    clone(): Board {\r\n        return cloneDeep(this);\r\n    }\r\n\r\n    isFieldTakenByEnemy(row: number, col: number, enemyColor: Color): boolean {\r\n        if (row > 7 || row < 0 || col > 7 || col < 0) {\r\n            return false;\r\n        }\r\n        return this.pieces.some(\r\n            (piece) => piece.point.col === col && piece.point.row === row && piece.color === enemyColor\r\n        );\r\n    }\r\n\r\n    isFieldEmpty(row: number, col: number): boolean {\r\n        if (row > 7 || row < 0 || col > 7 || col < 0) {\r\n            return false;\r\n        }\r\n        return !this.pieces.some((piece) => piece.point.col === col && piece.point.row === row);\r\n    }\r\n\r\n    isFieldUnderAttack(row: number, col: number, color: Color) {\r\n        return this.pieces\r\n            .filter((piece) => piece.color === color)\r\n            .some((piece) => piece.getCoveredFields().some((field) => field.col === col && field.row === row));\r\n    }\r\n\r\n    getPieceByField(row: number, col: number): Piece {\r\n        if (this.isFieldEmpty(row, col)) {\r\n            //   throw new Error('Piece not found');\r\n            return undefined;\r\n        }\r\n\r\n        return this.pieces.find((piece) => piece.point.col === col && piece.point.row === row);\r\n    }\r\n\r\n    isKingInCheck(color: Color, pieces: Piece[]): boolean {\r\n        const king = pieces.find((piece) => piece.color === color && piece instanceof King);\r\n\r\n        if (king) {\r\n            return pieces.some(\r\n                (piece) =>\r\n                    piece\r\n                        .getPossibleCaptures()\r\n                        .some((point) => point.col === king.point.col && point.row === king.point.row) &&\r\n                    piece.color !== color\r\n            );\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getKingByColor(color: Color): King {\r\n        return this.pieces.find((piece) => piece instanceof King && piece.color === color) as King;\r\n    }\r\n\r\n    getCastleFENString(color: Color) {\r\n        const king = this.getKingByColor(color);\r\n\r\n        if (king.isMovedAlready) {\r\n            return '';\r\n        }\r\n\r\n        let fen = '';\r\n        const leftRook = this.getPieceByField(king.point.row, 0);\r\n        const rightRook = this.getPieceByField(king.point.row, 7);\r\n\r\n        if (rightRook instanceof Rook && rightRook.color === color) {\r\n            if (!rightRook.isMovedAlready) {\r\n                fen += this.reverted ? 'q' : 'k';\r\n            }\r\n        }\r\n\r\n        if (leftRook instanceof Rook && leftRook.color === color) {\r\n            if (!leftRook.isMovedAlready) {\r\n                fen += this.reverted ? 'k' : 'q';\r\n            }\r\n        }\r\n\r\n        fen = fen.split('').sort().join('');\r\n        return color === Color.BLACK ? fen : fen.toUpperCase();\r\n    }\r\n\r\n    getEnPassantFENString() {\r\n        if (this.enPassantPoint) {\r\n            if (this.reverted) {\r\n                return String.fromCharCode(104 - this.enPassantPoint.col) + (this.enPassantPoint.row + 1);\r\n            } else {\r\n                return String.fromCharCode(97 + this.enPassantPoint.col) + (Math.abs(this.enPassantPoint.row - 7) + 1);\r\n            }\r\n        } else {\r\n            return '-';\r\n        }\r\n    }\r\n\r\n    calculateFEN() {\r\n        let fen = '';\r\n        for (let i = 0; i < 8; ++i) {\r\n            let emptyFields = 0;\r\n            for (let j = 0; j < 8; ++j) {\r\n                const foundPiece = this.pieces.find((piece) => piece.point.col === j && piece.point.row === i);\r\n                if (foundPiece) {\r\n                    if (emptyFields > 0) {\r\n                        fen += emptyFields;\r\n                        emptyFields = 0;\r\n                    }\r\n\r\n                    if (foundPiece instanceof Rook) {\r\n                        fen += foundPiece.color === Color.BLACK ? 'r' : 'R';\r\n                    } else {\r\n                        if (foundPiece instanceof Knight) {\r\n                            fen += foundPiece.color === Color.BLACK ? 'n' : 'N';\r\n                        } else {\r\n                            if (foundPiece instanceof Bishop) {\r\n                                fen += foundPiece.color === Color.BLACK ? 'b' : 'B';\r\n                            } else {\r\n                                if (foundPiece instanceof Queen) {\r\n                                    fen += foundPiece.color === Color.BLACK ? 'q' : 'Q';\r\n                                } else {\r\n                                    if (foundPiece instanceof King) {\r\n                                        fen += foundPiece.color === Color.BLACK ? 'k' : 'K';\r\n                                    } else {\r\n                                        if (foundPiece instanceof Pawn) {\r\n                                            fen += foundPiece.color === Color.BLACK ? 'p' : 'P';\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    ++emptyFields;\r\n                }\r\n            }\r\n\r\n            if (emptyFields > 0) {\r\n                fen += emptyFields;\r\n            }\r\n\r\n            fen += '/';\r\n        }\r\n\r\n        fen = fen.substr(0, fen.length - 1);\r\n\r\n        if (this.reverted) {\r\n            fen = fen.split('').reverse().join('');\r\n        }\r\n\r\n        fen += ' ' + (this.currentWhitePlayer ? 'w' : 'b');\r\n        const whiteEnPassant = this.getCastleFENString(Color.WHITE);\r\n        const blackEnPassant = this.getCastleFENString(Color.BLACK);\r\n        let concatedEnPassant = whiteEnPassant + blackEnPassant;\r\n        if (!concatedEnPassant) {\r\n            concatedEnPassant = '-';\r\n        }\r\n\r\n        fen += ' ' + concatedEnPassant;\r\n        fen += ' ' + this.getEnPassantFENString();\r\n        fen += ' ' + 0;\r\n        fen += ' ' + this.fullMoveCount;\r\n        this.fen = fen;\r\n    }\r\n\r\n    isXYInPointSelection(i: number, j: number) {\r\n        return false;\r\n    }\r\n\r\n    private reversePoint(point: Point) {\r\n        if (point) {\r\n            point.row = Math.abs(point.row - 7);\r\n            point.col = Math.abs(point.col - 7);\r\n        }\r\n    }\r\n}\r\n","export class MoveTranslation {\r\n    private _xAxis: number;\r\n    private _yAxis: number;\r\n    private _reverted: boolean;\r\n\r\n    constructor(xAxis: number, yAxis: number, reverted: boolean) {\r\n        this._xAxis = xAxis;\r\n        this._yAxis = yAxis;\r\n        this._reverted = reverted;\r\n    }\r\n\r\n    get xAxis(): number {\r\n        return this._xAxis;\r\n    }\r\n\r\n    set xAxis(value: number) {\r\n        this._xAxis = value;\r\n    }\r\n\r\n    get yAxis(): number {\r\n        return this._yAxis;\r\n    }\r\n\r\n    set yAxis(value: number) {\r\n        this._yAxis = value;\r\n    }\r\n\r\n    get reverted(): boolean {\r\n        return this._reverted;\r\n    }\r\n\r\n    set reverted(value: boolean) {\r\n        this._reverted = value;\r\n    }\r\n}\r\n","import { Board } from '../models/board';\r\nimport { Color } from '../models/pieces/color';\r\nimport { Point } from '../models/pieces/point';\r\nimport { MoveTranslation } from '../models/move-translation';\r\n\r\nexport class MoveUtils {\r\n    public static willMoveCauseCheck(\r\n        currentColor: Color,\r\n        row: number,\r\n        col: number,\r\n        destRow: number,\r\n        destCol: number,\r\n        board: Board\r\n    ) {\r\n        const srcPiece = board.getPieceByField(row, col);\r\n        const destPiece = board.getPieceByField(destRow, destCol);\r\n\r\n        if (srcPiece) {\r\n            srcPiece.point.row = destRow;\r\n            srcPiece.point.col = destCol;\r\n        }\r\n\r\n        if (destPiece) {\r\n            board.pieces = board.pieces.filter((piece) => piece !== destPiece);\r\n        }\r\n        const isBound = board.isKingInCheck(currentColor, board.pieces);\r\n\r\n        if (srcPiece) {\r\n            srcPiece.point.col = col;\r\n            srcPiece.point.row = row;\r\n        }\r\n\r\n        if (destPiece) {\r\n            board.pieces.push(destPiece);\r\n        }\r\n\r\n        return isBound;\r\n    }\r\n\r\n    public static format(\r\n        sourcePoint: Point,\r\n        destPoint: Point,\r\n        reverted: boolean\r\n    ) {\r\n        if (reverted) {\r\n            const sourceX = 104 - sourcePoint.col;\r\n            const destX = 104 - destPoint.col;\r\n            return (\r\n                String.fromCharCode(sourceX) +\r\n                (sourcePoint.row + 1) +\r\n                String.fromCharCode(destX) +\r\n                (destPoint.row + 1)\r\n            );\r\n        } else {\r\n            const incrementX = 97;\r\n            return (\r\n                String.fromCharCode(sourcePoint.col + incrementX) +\r\n                (Math.abs(sourcePoint.row - 7) + 1) +\r\n                String.fromCharCode(destPoint.col + incrementX) +\r\n                (Math.abs(destPoint.row - 7) + 1)\r\n            );\r\n        }\r\n    }\r\n\r\n    public static translateCoordsToIndex(coords: string, reverted: boolean) {\r\n        let xAxis: number;\r\n        let yAxis: number;\r\n        if (reverted) {\r\n            xAxis = 104 - coords.charCodeAt(0);\r\n            yAxis = +coords.charAt(1) - 1;\r\n        } else {\r\n            xAxis = coords.charCodeAt(0) - 97;\r\n            yAxis = Math.abs(+coords.charAt(1) - 8);\r\n        }\r\n\r\n        return new MoveTranslation(xAxis, yAxis, reverted);\r\n    }\r\n}\r\n","import { Point } from '../models/pieces/point';\r\nimport { AbstractPiece } from './abstract-piece';\r\n\r\nexport abstract class PieceAbstractDecorator implements AbstractPiece {\r\n\r\n    piece: AbstractPiece;\r\n\r\n    protected constructor(piece: AbstractPiece) {\r\n        this.piece = piece;\r\n    }\r\n\r\n    abstract getPossibleCaptures(): Point[];\r\n\r\n    abstract getPossibleMoves(): Point[];\r\n\r\n}\r\n","import { Board } from '../models/board';\r\nimport { Color } from '../models/pieces/color';\r\nimport { Point } from '../models/pieces/point';\r\nimport { MoveUtils } from '../utils/move-utils';\r\nimport { AbstractPiece } from './abstract-piece';\r\nimport { PieceAbstractDecorator } from './piece-abstract-decorator';\r\n\r\nexport class AvailableMoveDecorator extends PieceAbstractDecorator {\r\n    private pointClicked: Point;\r\n    private color: Color;\r\n    private board: Board;\r\n\r\n    constructor(piece: AbstractPiece, pointClicked: Point, color: Color, board: Board) {\r\n        super(piece);\r\n        this.pointClicked = pointClicked;\r\n        this.color = color;\r\n        this.board = board;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        return this.piece\r\n            .getPossibleCaptures()\r\n            .filter(\r\n                (point) =>\r\n                    !MoveUtils.willMoveCauseCheck(\r\n                        this.color,\r\n                        this.pointClicked.row,\r\n                        this.pointClicked.col,\r\n                        point.row,\r\n                        point.col,\r\n                        this.board\r\n                    )\r\n            );\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        return this.piece\r\n            .getPossibleMoves()\r\n            .filter(\r\n                (point) =>\r\n                    !MoveUtils.willMoveCauseCheck(\r\n                        this.color,\r\n                        this.pointClicked.row,\r\n                        this.pointClicked.col,\r\n                        point.row,\r\n                        point.col,\r\n                        this.board\r\n                    )\r\n            );\r\n    }\r\n}\r\n","import { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { Color } from '../models/pieces/color';\r\n\r\n@Component({\r\n    selector: 'app-piece-promotion-modal',\r\n    templateUrl: './piece-promotion-modal.component.html',\r\n    styleUrls: ['./piece-promotion-modal.component.scss'],\r\n})\r\nexport class PiecePromotionModalComponent {\r\n    @ViewChild('modal', { static: false }) modal: ElementRef;\r\n\r\n    selectedIndex = 0;\r\n    color: Color;\r\n    Color = Color;\r\n    opened = false;\r\n    private onCloseCallback: (index: number) => void;\r\n\r\n    open(color: Color, closeCallback: (index: number) => void) {\r\n        this.opened = true;\r\n        this.color = color;\r\n        this.onCloseCallback = closeCallback;\r\n        this.modal.nativeElement.style.display = 'block';\r\n    }\r\n\r\n    changeSelection(index: number) {\r\n        this.modal.nativeElement.style.display = 'none';\r\n        this.opened = false;\r\n        this.onCloseCallback(index);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class NgxChessBoardService {\r\n    private componentMethodCallSource = new Subject<any>();\r\n\r\n    componentMethodCalled$ = this.componentMethodCallSource.asObservable();\r\n\r\n    reset() {\r\n        this.componentMethodCallSource.next();\r\n    }\r\n}\r\n","export class Constants {\r\n    static readonly DEFAULT_DARK_TILE_COLOR = 'rgb(97, 84, 61)';\r\n    static readonly DEFAULT_LIGHT_TILE_COLOR = '#BAA378';\r\n\r\n    static readonly DEFAULT_SIZE = 500;\r\n    static readonly MIN_BOARD_SIZE = 100;\r\n    static readonly MAX_BOARD_SIZE = 4000;\r\n\r\n}\r\n","import { Bishop } from '../../models/pieces/bishop';\r\nimport { Color } from '../../models/pieces/color';\r\nimport { King } from '../../models/pieces/king';\r\nimport { Knight } from '../../models/pieces/knight';\r\nimport { Pawn } from '../../models/pieces/pawn';\r\nimport { Piece } from '../../models/pieces/piece';\r\nimport { Queen } from '../../models/pieces/queen';\r\nimport { Rook } from '../../models/pieces/rook';\r\nimport { PieceIconInput } from './piece-icon-input';\r\n\r\nexport class PieceIconInputManager {\r\n\r\n    private _defaultIcons: boolean = false;\r\n    private _pieceIconInput: PieceIconInput;\r\n\r\n    get pieceIconInput(): PieceIconInput {\r\n        return this._pieceIconInput;\r\n    }\r\n\r\n    set pieceIconInput(value: PieceIconInput) {\r\n        this._pieceIconInput = value;\r\n    }\r\n\r\n\r\n    get defaultIcons(): boolean {\r\n        return this._defaultIcons;\r\n    }\r\n\r\n    set defaultIcons(value: boolean) {\r\n        this._defaultIcons = value;\r\n    }\r\n\r\n    isDefaultIcons(): boolean {\r\n        return this.pieceIconInput === undefined || this.pieceIconInput === null;\r\n    }\r\n\r\n    getPieceIcon(piece: Piece): string {\r\n        let isWhite = (piece.color === Color.WHITE);\r\n        switch (piece.constructor) {\r\n            case King:\r\n                return isWhite ? this.pieceIconInput.whiteKingUrl : this.pieceIconInput.blackKingUrl;\r\n            case Queen:\r\n                return isWhite ? this.pieceIconInput.whiteQueenUrl : this.pieceIconInput.blackQueenUrl;\r\n            case Rook:\r\n                return isWhite ? this.pieceIconInput.whiteRookUrl : this.pieceIconInput.blackRookUrl;\r\n            case Bishop:\r\n                return isWhite ? this.pieceIconInput.whiteBishopUrl : this.pieceIconInput.blackBishopUrl;\r\n            case Knight:\r\n                return isWhite ? this.pieceIconInput.whiteKnightUrl : this.pieceIconInput.blackKnightUrl;\r\n            case Pawn:\r\n                return isWhite ? this.pieceIconInput.whitePawnUrl : this.pieceIconInput.blackPawnUrl;\r\n        }\r\n    }\r\n\r\n    loadDefaultData(){\r\n        this.pieceIconInput = {\r\n            blackBishopUrl: '',\r\n            blackKingUrl: '',\r\n            blackKnightUrl: '',\r\n            blackQueenUrl: '',\r\n            blackRookUrl: '',\r\n            whiteBishopUrl: '',\r\n            whiteKingUrl: '',\r\n            whiteKnightUrl: '',\r\n            whitePawnUrl: '',\r\n            whiteQueenUrl: '',\r\n            whiteRookUrl: '',\r\n            blackPawnUrl: 'a'\r\n        }\r\n    }\r\n\r\n}\r\n","import { CdkDragEnd, CdkDragStart } from '@angular/cdk/drag-drop';\r\nimport {\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    HostListener,\r\n    Input,\r\n    OnChanges,\r\n    OnInit,\r\n    Output,\r\n    SimpleChanges,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport { BoardLoader } from './board-state-provider/board-loader';\r\nimport { BoardState } from './board-state-provider/board-state';\r\nimport { BoardStateProvider } from './board-state-provider/board-state-provider';\r\nimport { MoveStateProvider } from './board-state-provider/move-state-provider';\r\nimport { CoordsProvider } from './coords/coords-provider';\r\nimport { Arrow } from './drawing-tools/arrow';\r\nimport { Circle } from './drawing-tools/circle';\r\nimport { DrawPoint } from './drawing-tools/draw-point';\r\nimport { DrawProvider } from './drawing-tools/draw-provider';\r\nimport { HistoryMove } from './history-move-provider/history-move';\r\nimport { HistoryMoveProvider } from './history-move-provider/history-move-provider';\r\nimport { Board } from './models/board';\r\nimport { Bishop } from './models/pieces/bishop';\r\nimport { Color } from './models/pieces/color';\r\nimport { King } from './models/pieces/king';\r\nimport { Knight } from './models/pieces/knight';\r\nimport { Pawn } from './models/pieces/pawn';\r\nimport { Piece } from './models/pieces/piece';\r\nimport { Point } from './models/pieces/point';\r\nimport { Queen } from './models/pieces/queen';\r\nimport { Rook } from './models/pieces/rook';\r\nimport { NgxChessBoardView } from './ngx-chess-board-view';\r\nimport { AvailableMoveDecorator } from './piece-decorator/available-move-decorator';\r\nimport { PiecePromotionModalComponent } from './piece-promotion-modal/piece-promotion-modal.component';\r\nimport { NgxChessBoardService } from './service/ngx-chess-board.service';\r\nimport { Constants } from './utils/constants';\r\nimport { PieceIconInput } from './utils/inputs/piece-icon-input';\r\nimport { PieceIconInputManager } from './utils/inputs/piece-icon-input-manager';\r\nimport { MoveUtils } from './utils/move-utils';\r\nimport { UnicodeConstants } from './utils/unicode-constants';\r\n\r\nexport interface MoveChange extends HistoryMove {\r\n    check: boolean;\r\n    stalemate: boolean;\r\n    checkmate: boolean;\r\n    fen: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'ngx-chess-board',\r\n    templateUrl: './ngx-chess-board.component.html',\r\n    styleUrls: ['./ngx-chess-board.component.scss'],\r\n})\r\nexport class NgxChessBoardComponent\r\n    implements OnInit, OnChanges, NgxChessBoardView {\r\n    @Input() darkTileColor = Constants.DEFAULT_DARK_TILE_COLOR;\r\n    @Input() lightTileColor: string = Constants.DEFAULT_LIGHT_TILE_COLOR;\r\n    @Input() showCoords = true;\r\n    @Input() dragDisabled = false;\r\n    @Input() drawDisabled = false;\r\n    @Input() lightDisabled = false;\r\n    @Input() darkDisabled = false;\r\n    @Output() moveChange = new EventEmitter<MoveChange>();\r\n    @Output() checkmate = new EventEmitter<void>();\r\n    @Output() stalemate = new EventEmitter<void>();\r\n    pieceSize: number;\r\n    selected = false;\r\n    @ViewChild('boardRef', { static: false })\r\n    boardRef: ElementRef;\r\n    @ViewChild('modal', { static: false }) modal: PiecePromotionModalComponent;\r\n    board: Board;\r\n    boardStateProvider: BoardStateProvider;\r\n    moveStateProvider: MoveStateProvider;\r\n    moveHistoryProvider: HistoryMoveProvider;\r\n    boardLoader: BoardLoader;\r\n    coords: CoordsProvider = new CoordsProvider();\r\n    disabling = false;\r\n    drawProvider: DrawProvider;\r\n    drawPoint: DrawPoint;\r\n    pieceIconManager: PieceIconInputManager;\r\n\r\n    constructor(private ngxChessBoardService: NgxChessBoardService) {\r\n        this.board = new Board();\r\n        this.boardLoader = new BoardLoader(this.board);\r\n        this.boardLoader.addPieces();\r\n        this.boardStateProvider = new BoardStateProvider();\r\n        this.moveHistoryProvider = new HistoryMoveProvider();\r\n        this.drawProvider = new DrawProvider();\r\n        this.pieceIconManager = new PieceIconInputManager();\r\n    }\r\n\r\n    heightAndWidth: number = Constants.DEFAULT_SIZE;\r\n\r\n    @Input('size')\r\n    public set size(size: number) {\r\n        if (\r\n            size &&\r\n            size >= Constants.MIN_BOARD_SIZE &&\r\n            size <= Constants.MAX_BOARD_SIZE\r\n        ) {\r\n            this.heightAndWidth = size;\r\n        } else {\r\n            this.heightAndWidth = Constants.DEFAULT_SIZE;\r\n        }\r\n        this.drawProvider.clear();\r\n        this.calculatePieceSize();\r\n    }\r\n\r\n    @Input('pieceIcons')\r\n    public set pieceIcons(pieceIcons: PieceIconInput) {\r\n        this.pieceIconManager.pieceIconInput = pieceIcons;\r\n    }\r\n\r\n    @HostListener('contextmenu', ['$event'])\r\n    onRightClick(event: MouseEvent) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (\r\n            (changes.lightDisabled &&\r\n                this.lightDisabled &&\r\n                this.board.currentWhitePlayer) ||\r\n            (changes.darkDisabled &&\r\n                this.darkDisabled &&\r\n                !this.board.currentWhitePlayer)\r\n        ) {\r\n            this.board.possibleCaptures = [];\r\n            this.board.possibleMoves = [];\r\n        }\r\n    }\r\n    ngOnInit() {\r\n        this.ngxChessBoardService.componentMethodCalled$.subscribe(() => {\r\n            this.board.reset();\r\n        });\r\n        this.calculatePieceSize();\r\n    }\r\n\r\n    onMouseUp(event: MouseEvent) {\r\n        if (event.button !== 0 && !this.drawDisabled) {\r\n            this.addDrawPoint(\r\n                event.x,\r\n                event.y,\r\n                event.ctrlKey,\r\n                event.altKey,\r\n                event.shiftKey\r\n            );\r\n            return;\r\n        }\r\n\r\n        this.drawProvider.clear();\r\n\r\n        if (this.dragDisabled) {\r\n            return;\r\n        }\r\n        const pointClicked = this.getClickPoint(event);\r\n\r\n        if (\r\n            this.board.activePiece &&\r\n            pointClicked.isEqual(this.board.activePiece.point) &&\r\n            this.disabling\r\n        ) {\r\n            this.disableSelection();\r\n            this.disabling = false;\r\n            return;\r\n        }\r\n        const pieceClicked = this.getPieceByPoint(\r\n            pointClicked.row,\r\n            pointClicked.col\r\n        );\r\n\r\n        if (this.isPieceDisabled(pieceClicked)) {\r\n            return;\r\n        }\r\n\r\n        if (this.selected) {\r\n            this.handleClickEvent(pointClicked);\r\n            //   this.possibleMoves = activePiece.getPossibleMoves();\r\n        } else {\r\n            if (pieceClicked) {\r\n                if (\r\n                    (this.board.currentWhitePlayer &&\r\n                        pieceClicked.color === Color.BLACK) ||\r\n                    (!this.board.currentWhitePlayer &&\r\n                        pieceClicked.color === Color.WHITE)\r\n                ) {\r\n                    return;\r\n                }\r\n\r\n                this.prepareActivePiece(pieceClicked, pointClicked);\r\n            }\r\n        }\r\n    }\r\n\r\n    afterMoveActions(promotionIndex?: number) {\r\n        this.checkIfPawnFirstMove(this.board.activePiece);\r\n        this.checkIfRookMoved(this.board.activePiece);\r\n        this.checkIfKingMoved(this.board.activePiece);\r\n\r\n        this.board.blackKingChecked = this.board.isKingInCheck(\r\n            Color.BLACK,\r\n            this.board.pieces\r\n        );\r\n        this.board.whiteKingChecked = this.board.isKingInCheck(\r\n            Color.WHITE,\r\n            this.board.pieces\r\n        );\r\n        const check =\r\n            this.board.blackKingChecked || this.board.whiteKingChecked;\r\n        const checkmate =\r\n            this.checkForPossibleMoves(Color.BLACK) ||\r\n            this.checkForPossibleMoves(Color.WHITE);\r\n        const stalemate =\r\n            this.checkForPat(Color.BLACK) || this.checkForPat(Color.WHITE);\r\n\r\n        this.disabling = false;\r\n        this.board.calculateFEN();\r\n\r\n        const lastMove = this.moveHistoryProvider.getLastMove();\r\n        if (lastMove && promotionIndex) {\r\n            lastMove.move += promotionIndex;\r\n        }\r\n\r\n        this.moveChange.emit({\r\n            ...lastMove,\r\n            check,\r\n            checkmate,\r\n            stalemate,\r\n            fen: this.board.fen,\r\n        });\r\n    }\r\n\r\n    disableSelection() {\r\n        this.selected = false;\r\n        this.board.possibleCaptures = [];\r\n        this.board.activePiece = null;\r\n        this.board.possibleMoves = [];\r\n    }\r\n\r\n    prepareActivePiece(pieceClicked: Piece, pointClicked: Point) {\r\n        this.board.activePiece = pieceClicked;\r\n        this.selected = true;\r\n        this.board.possibleCaptures = new AvailableMoveDecorator(\r\n            pieceClicked,\r\n            pointClicked,\r\n            this.board.currentWhitePlayer ? Color.WHITE : Color.BLACK,\r\n            this.board\r\n        ).getPossibleCaptures();\r\n        this.board.possibleMoves = new AvailableMoveDecorator(\r\n            pieceClicked,\r\n            pointClicked,\r\n            this.board.currentWhitePlayer ? Color.WHITE : Color.BLACK,\r\n            this.board\r\n        ).getPossibleMoves();\r\n    }\r\n\r\n    getPieceByPoint(row: number, col: number): Piece {\r\n        row = Math.floor(row);\r\n        col = Math.floor(col);\r\n        return this.board.pieces.find(\r\n            (piece) => piece.point.col === col && piece.point.row === row\r\n        );\r\n    }\r\n\r\n    isKingChecked(piece: Piece) {\r\n        if (piece instanceof King) {\r\n            return piece.color === Color.WHITE\r\n                ? this.board.whiteKingChecked\r\n                : this.board.blackKingChecked;\r\n        }\r\n    }\r\n\r\n    getClickPoint(event) {\r\n        return new Point(\r\n            Math.floor(\r\n                (event.y -\r\n                    this.boardRef.nativeElement.getBoundingClientRect().top) /\r\n                    (this.boardRef.nativeElement.getBoundingClientRect()\r\n                        .height /\r\n                        8)\r\n            ),\r\n            Math.floor(\r\n                (event.x -\r\n                    this.boardRef.nativeElement.getBoundingClientRect().left) /\r\n                    (this.boardRef.nativeElement.getBoundingClientRect().width /\r\n                        8)\r\n            )\r\n        );\r\n    }\r\n\r\n    movePiece(toMovePiece: Piece, newPoint: Point, promotionIndex?: number) {\r\n        const destPiece = this.board.pieces.find(\r\n            (piece) =>\r\n                piece.point.col === newPoint.col &&\r\n                piece.point.row === newPoint.row\r\n        );\r\n\r\n        if (destPiece && toMovePiece.color !== destPiece.color) {\r\n            this.board.pieces = this.board.pieces.filter(\r\n                (piece) => piece !== destPiece\r\n            );\r\n        } else {\r\n            if (destPiece && toMovePiece.color === destPiece.color) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        const move = new HistoryMove(\r\n            MoveUtils.format(toMovePiece.point, newPoint, this.board.reverted),\r\n            toMovePiece.constant.name,\r\n            toMovePiece.color === Color.WHITE ? 'white' : 'black',\r\n            !!destPiece\r\n        );\r\n        this.moveHistoryProvider.addMove(move);\r\n\r\n        if (toMovePiece instanceof King) {\r\n            const squaresMoved = Math.abs(newPoint.col - toMovePiece.point.col);\r\n            if (squaresMoved > 1) {\r\n                if (newPoint.col < 3) {\r\n                    const leftRook = this.board.getPieceByField(\r\n                        toMovePiece.point.row,\r\n                        0\r\n                    );\r\n                    leftRook.point.col = this.board.reverted ? 2 : 3;\r\n                } else {\r\n                    const rightRook = this.board.getPieceByField(\r\n                        toMovePiece.point.row,\r\n                        7\r\n                    );\r\n                    rightRook.point.col = this.board.reverted ? 4 : 5;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (toMovePiece instanceof Pawn) {\r\n            this.checkIfPawnTakesEnPassant(newPoint);\r\n            this.checkIfPawnEnpassanted(toMovePiece, newPoint);\r\n        }\r\n\r\n        toMovePiece.point = newPoint;\r\n        this.increaseFullMoveCount();\r\n        this.board.currentWhitePlayer = !this.board.currentWhitePlayer;\r\n\r\n        if (!this.checkForPawnPromote(toMovePiece, promotionIndex)) {\r\n            this.afterMoveActions();\r\n        }\r\n    }\r\n\r\n    checkIfPawnFirstMove(piece: Piece) {\r\n        if (piece instanceof Pawn) {\r\n            piece.isMovedAlready = true;\r\n        }\r\n    }\r\n\r\n    checkForPawnPromote(toPromotePiece: Piece, promotionIndex?: number) {\r\n        if (!(toPromotePiece instanceof Pawn)) {\r\n            return;\r\n        }\r\n\r\n        if (toPromotePiece.point.row === 0 || toPromotePiece.point.row === 7) {\r\n            this.board.pieces = this.board.pieces.filter(\r\n                (piece) => piece !== toPromotePiece\r\n            );\r\n\r\n            // When we make move manually, we pass promotion index already, so we don't need\r\n            // to acquire it from promote dialog\r\n            if (!promotionIndex) {\r\n                this.openPromoteDialog(toPromotePiece);\r\n            } else {\r\n                this.resolvePromotionChoice(toPromotePiece, promotionIndex);\r\n                this.afterMoveActions(promotionIndex);\r\n            }\r\n\r\n            return true;\r\n        }\r\n    }\r\n\r\n    openPromoteDialog(piece: Piece) {\r\n        this.modal.open(piece.color, (index) => {\r\n            this.resolvePromotionChoice(piece, index);\r\n            this.afterMoveActions(index);\r\n        });\r\n    }\r\n\r\n    resolvePromotionChoice(piece: Piece, index: number) {\r\n        const isWhite = piece.color === Color.WHITE;\r\n        switch (index) {\r\n            case 1:\r\n                this.board.pieces.push(\r\n                    new Queen(\r\n                        piece.point,\r\n                        piece.color,\r\n                        isWhite\r\n                            ? UnicodeConstants.WHITE_QUEEN\r\n                            : UnicodeConstants.BLACK_QUEEN,\r\n                        this.board\r\n                    )\r\n                );\r\n                break;\r\n            case 2:\r\n                this.board.pieces.push(\r\n                    new Rook(\r\n                        piece.point,\r\n                        piece.color,\r\n                        isWhite\r\n                            ? UnicodeConstants.WHITE_ROOK\r\n                            : UnicodeConstants.BLACK_ROOK,\r\n                        this.board\r\n                    )\r\n                );\r\n                break;\r\n            case 3:\r\n                this.board.pieces.push(\r\n                    new Bishop(\r\n                        piece.point,\r\n                        piece.color,\r\n                        isWhite\r\n                            ? UnicodeConstants.WHITE_BISHOP\r\n                            : UnicodeConstants.BLACK_BISHOP,\r\n                        this.board\r\n                    )\r\n                );\r\n                break;\r\n            case 4:\r\n                this.board.pieces.push(\r\n                    new Knight(\r\n                        piece.point,\r\n                        piece.color,\r\n                        isWhite\r\n                            ? UnicodeConstants.WHITE_KNIGHT\r\n                            : UnicodeConstants.BLACK_KNIGHT,\r\n                        this.board\r\n                    )\r\n                );\r\n                break;\r\n        }\r\n    }\r\n\r\n    reset(): void {\r\n        this.boardStateProvider.clear();\r\n        this.moveHistoryProvider.clear();\r\n        this.boardLoader.addPieces();\r\n        this.board.reset();\r\n        this.coords.reset();\r\n        this.drawProvider.clear();\r\n    }\r\n\r\n    reverse(): void {\r\n        this.selected = false;\r\n        this.board.reverse();\r\n        this.coords.reverse();\r\n    }\r\n\r\n    updateBoard(board: Board) {\r\n        this.board = board;\r\n        this.boardLoader.setBoard(this.board);\r\n        this.board.possibleCaptures = [];\r\n        this.board.possibleMoves = [];\r\n    }\r\n    undo(): void {\r\n        if (!this.boardStateProvider.isEmpty()) {\r\n            const lastBoard = this.boardStateProvider.pop().board;\r\n            if (this.board.reverted) {\r\n                lastBoard.reverse();\r\n            }\r\n            this.board = lastBoard;\r\n            this.boardLoader.setBoard(this.board);\r\n            this.board.possibleCaptures = [];\r\n            this.board.possibleMoves = [];\r\n            this.moveHistoryProvider.pop();\r\n        }\r\n    }\r\n\r\n    getMoveHistory(): HistoryMove[] {\r\n        return this.moveHistoryProvider.getAll();\r\n    }\r\n\r\n    setFEN(fen: string): void {\r\n        try {\r\n            this.boardLoader.loadFEN(fen);\r\n            this.board.possibleCaptures = [];\r\n            this.board.possibleMoves = [];\r\n        } catch (exception) {\r\n            this.boardLoader.addPieces();\r\n        }\r\n    }\r\n\r\n    getFEN(): string {\r\n        return this.board.fen;\r\n    }\r\n\r\n    dragEnded(event: CdkDragEnd): void {\r\n        event.source.reset();\r\n        event.source.element.nativeElement.style.zIndex = '0';\r\n        event.source.element.nativeElement.style.pointerEvents = 'auto';\r\n        event.source.element.nativeElement.style.touchAction = 'auto';\r\n    }\r\n\r\n    dragStart(event: CdkDragStart): void {\r\n        const style = event.source.element.nativeElement.style;\r\n        style.position = 'relative';\r\n        style.zIndex = '1000';\r\n        style.touchAction = 'none';\r\n        style.pointerEvents = 'none';\r\n    }\r\n\r\n    onMouseDown(event: MouseEvent) {\r\n        if (event.button !== 0) {\r\n            this.drawPoint = this.getDrawingPoint(\r\n                event.x,\r\n                event.y,\r\n                event.ctrlKey,\r\n                event.altKey,\r\n                event.shiftKey\r\n            );\r\n            return;\r\n        }\r\n        const pointClicked = this.getClickPoint(event);\r\n\r\n        this.drawProvider.clear();\r\n\r\n        if (\r\n            this.board.activePiece &&\r\n            pointClicked.isEqual(this.board.activePiece.point)\r\n        ) {\r\n            this.disabling = true;\r\n            return;\r\n        }\r\n\r\n        const pieceClicked = this.getPieceByPoint(\r\n            pointClicked.row,\r\n            pointClicked.col\r\n        );\r\n\r\n        if (this.isPieceDisabled(pieceClicked)) {\r\n            return;\r\n        }\r\n\r\n        if (this.selected) {\r\n            this.handleClickEvent(pointClicked);\r\n        } else {\r\n            if (pieceClicked) {\r\n                if (\r\n                    (this.board.currentWhitePlayer &&\r\n                        pieceClicked.color === Color.BLACK) ||\r\n                    (!this.board.currentWhitePlayer &&\r\n                        pieceClicked.color === Color.WHITE)\r\n                ) {\r\n                    return;\r\n                }\r\n\r\n                this.prepareActivePiece(pieceClicked, pointClicked);\r\n            }\r\n        }\r\n    }\r\n\r\n    getDrawingPoint(\r\n        x: number,\r\n        y: number,\r\n        crtl: boolean,\r\n        alt: boolean,\r\n        shift: boolean\r\n    ) {\r\n        const squareSize = this.heightAndWidth / 8;\r\n        const xx = Math.floor(\r\n            (x - this.boardRef.nativeElement.getBoundingClientRect().left) /\r\n                squareSize\r\n        );\r\n        const yy = Math.floor(\r\n            (y - this.boardRef.nativeElement.getBoundingClientRect().top) /\r\n                squareSize\r\n        );\r\n\r\n        let color = 'green';\r\n\r\n        if (crtl || shift) {\r\n            color = 'red';\r\n        }\r\n        if (alt) {\r\n            color = 'blue';\r\n        }\r\n        if ((shift || crtl) && alt) {\r\n            color = 'orange';\r\n        }\r\n        return new DrawPoint(\r\n            Math.floor(xx * squareSize + squareSize / 2),\r\n            Math.floor(yy * squareSize + squareSize / 2),\r\n            color\r\n        );\r\n    }\r\n\r\n    private checkIfRookMoved(piece: Piece) {\r\n        if (piece instanceof Rook) {\r\n            piece.isMovedAlready = true;\r\n        }\r\n    }\r\n\r\n    private checkIfKingMoved(piece: Piece) {\r\n        if (piece instanceof King) {\r\n            piece.isMovedAlready = true;\r\n        }\r\n    }\r\n\r\n    private checkForPossibleMoves(color: Color): boolean {\r\n        if (\r\n            !this.board.pieces\r\n                .filter((piece) => piece.color === color)\r\n                .some(\r\n                    (piece) =>\r\n                        piece\r\n                            .getPossibleMoves()\r\n                            .some(\r\n                                (move) =>\r\n                                    !MoveUtils.willMoveCauseCheck(\r\n                                        color,\r\n                                        piece.point.row,\r\n                                        piece.point.col,\r\n                                        move.row,\r\n                                        move.col,\r\n                                        this.board\r\n                                    )\r\n                            ) ||\r\n                        piece\r\n                            .getPossibleCaptures()\r\n                            .some(\r\n                                (capture) =>\r\n                                    !MoveUtils.willMoveCauseCheck(\r\n                                        color,\r\n                                        piece.point.row,\r\n                                        piece.point.col,\r\n                                        capture.row,\r\n                                        capture.col,\r\n                                        this.board\r\n                                    )\r\n                            )\r\n                )\r\n        ) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private checkForPat(color: Color) {\r\n        if (color === Color.WHITE && !this.board.whiteKingChecked) {\r\n            return this.checkForPossibleMoves(color);\r\n        } else {\r\n            if (color === Color.BLACK && !this.board.blackKingChecked) {\r\n                return this.checkForPossibleMoves(color);\r\n            }\r\n        }\r\n    }\r\n\r\n    private checkIfPawnEnpassanted(piece: Pawn, newPoint: Point) {\r\n        if (Math.abs(piece.point.row - newPoint.row) > 1) {\r\n            this.board.enPassantPiece = piece;\r\n            this.board.enPassantPoint = new Point(\r\n                (piece.point.row + newPoint.row) / 2,\r\n                piece.point.col\r\n            );\r\n        } else {\r\n            this.board.enPassantPoint = null;\r\n            this.board.enPassantPiece = null;\r\n        }\r\n    }\r\n\r\n    private checkIfPawnTakesEnPassant(newPoint: Point) {\r\n        if (newPoint.isEqual(this.board.enPassantPoint)) {\r\n            this.board.pieces = this.board.pieces.filter(\r\n                (piece) => piece !== this.board.enPassantPiece\r\n            );\r\n            this.board.enPassantPoint = null;\r\n            this.board.enPassantPiece = null;\r\n        }\r\n    }\r\n\r\n    private saveClone() {\r\n        const clone = this.board.clone();\r\n\r\n        if (this.board.reverted) {\r\n            clone.reverse();\r\n        }\r\n        this.boardStateProvider.addMove(new BoardState(clone));\r\n    }\r\n\r\n    private saveMoveClone() {\r\n        const clone = this.board.clone();\r\n\r\n        if (this.board.reverted) {\r\n            clone.reverse();\r\n        }\r\n        this.moveStateProvider.addMove(new BoardState(clone));\r\n    }\r\n\r\n    private calculatePieceSize() {\r\n        this.pieceSize = this.heightAndWidth / 10;\r\n    }\r\n\r\n    private increaseFullMoveCount() {\r\n        if (!this.board.currentWhitePlayer) {\r\n            ++this.board.fullMoveCount;\r\n        }\r\n    }\r\n\r\n    private handleClickEvent(pointClicked: Point) {\r\n        if (\r\n            this.board.isPointInPossibleMoves(pointClicked) ||\r\n            this.board.isPointInPossibleCaptures(pointClicked)\r\n        ) {\r\n            this.saveClone();\r\n            this.board.lastMoveSrc = new Point(\r\n                this.board.activePiece.point.row,\r\n                this.board.activePiece.point.col\r\n            );\r\n            this.board.lastMoveDest = pointClicked;\r\n            this.movePiece(this.board.activePiece, pointClicked);\r\n        }\r\n\r\n        this.disableSelection();\r\n        const pieceClicked = this.getPieceByPoint(\r\n            pointClicked.row,\r\n            pointClicked.col\r\n        );\r\n        if (pieceClicked) {\r\n            if (\r\n                (this.board.currentWhitePlayer &&\r\n                    pieceClicked.color === Color.BLACK) ||\r\n                (!this.board.currentWhitePlayer &&\r\n                    pieceClicked.color === Color.WHITE)\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            this.prepareActivePiece(pieceClicked, pointClicked);\r\n        }\r\n    }\r\n\r\n    private addDrawPoint(\r\n        x: number,\r\n        y: number,\r\n        crtl: boolean,\r\n        alt: boolean,\r\n        shift: boolean\r\n    ) {\r\n        const upPoint = this.getDrawingPoint(x, y, crtl, alt, shift);\r\n        if (this.drawPoint.isEqual(upPoint)) {\r\n            const circle = new Circle();\r\n            circle.drawPoint = upPoint;\r\n            if (!this.drawProvider.containsCircle(circle)) {\r\n                this.drawProvider.addCircle(circle);\r\n            } else {\r\n                this.drawProvider.reomveCircle(circle);\r\n            }\r\n        } else {\r\n            const arrow = new Arrow();\r\n            arrow.start = this.drawPoint;\r\n            arrow.end = upPoint;\r\n\r\n            if (!this.drawProvider.containsArrow(arrow)) {\r\n                this.drawProvider.addArrow(arrow);\r\n            } else {\r\n                this.drawProvider.removeArrow(arrow);\r\n            }\r\n        }\r\n    }\r\n\r\n    move(coords: string) {\r\n        if (coords) {\r\n            const sourceIndexes = MoveUtils.translateCoordsToIndex(\r\n                coords.substring(0, 2),\r\n                this.board.reverted\r\n            );\r\n\r\n            const destIndexes = MoveUtils.translateCoordsToIndex(\r\n                coords.substring(2, 4),\r\n                this.board.reverted\r\n            );\r\n\r\n            const srcPiece = this.getPieceByPoint(\r\n                sourceIndexes.yAxis,\r\n                sourceIndexes.xAxis\r\n            );\r\n\r\n            if (srcPiece) {\r\n                if (\r\n                    (this.board.currentWhitePlayer &&\r\n                        srcPiece.color === Color.BLACK) ||\r\n                    (!this.board.currentWhitePlayer &&\r\n                        srcPiece.color === Color.WHITE)\r\n                ) {\r\n                    return;\r\n                }\r\n\r\n                this.prepareActivePiece(srcPiece, srcPiece.point);\r\n\r\n                if (\r\n                    this.board.isPointInPossibleMoves(\r\n                        new Point(destIndexes.yAxis, destIndexes.xAxis)\r\n                    ) ||\r\n                    this.board.isPointInPossibleCaptures(\r\n                        new Point(destIndexes.yAxis, destIndexes.xAxis)\r\n                    )\r\n                ) {\r\n                    this.saveClone();\r\n                    this.movePiece(\r\n                        srcPiece,\r\n                        new Point(destIndexes.yAxis, destIndexes.xAxis),\r\n                        coords.length === 5 ? +coords.substring(4, 5) : 0\r\n                    );\r\n\r\n                    this.board.lastMoveSrc = new Point(\r\n                        sourceIndexes.yAxis,\r\n                        sourceIndexes.xAxis\r\n                    );\r\n                    this.board.lastMoveDest = new Point(\r\n                        destIndexes.yAxis,\r\n                        destIndexes.xAxis\r\n                    );\r\n\r\n                    this.disableSelection();\r\n                } else {\r\n                    this.disableSelection();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getCustomPieceIcons(piece: Piece) {\r\n        return JSON.parse(\r\n            `{ \"background-image\": \"url('${this.pieceIconManager.getPieceIcon(\r\n                piece\r\n            )}')\"}`\r\n        );\r\n    }\r\n\r\n    private isPieceDisabled(pieceClicked: Piece) {\r\n        if (pieceClicked && pieceClicked.point) {\r\n            const foundCapture = this.board.possibleCaptures.find(\r\n                (capture) =>\r\n                    capture.col === pieceClicked.point.col &&\r\n                    capture.row === pieceClicked.point.row\r\n            );\r\n\r\n            if (foundCapture) {\r\n                return false;\r\n            }\r\n        }\r\n        return (\r\n            pieceClicked &&\r\n            ((this.lightDisabled && pieceClicked.color === Color.WHITE) ||\r\n                (this.darkDisabled && pieceClicked.color === Color.BLACK))\r\n        );\r\n    }\r\n}\r\n","import { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { NgxChessBoardComponent } from './ngx-chess-board.component';\r\nimport { PiecePromotionModalComponent } from './piece-promotion-modal/piece-promotion-modal.component';\r\nimport { NgxChessBoardService } from './service/ngx-chess-board.service';\r\n\r\n@NgModule({\r\n    declarations: [NgxChessBoardComponent, PiecePromotionModalComponent],\r\n    imports: [CommonModule, DragDropModule],\r\n    exports: [NgxChessBoardComponent],\r\n})\r\nexport class NgxChessBoardModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: NgxChessBoardModule,\r\n            providers: [NgxChessBoardService],\r\n        };\r\n    }\r\n}\r\n"]}